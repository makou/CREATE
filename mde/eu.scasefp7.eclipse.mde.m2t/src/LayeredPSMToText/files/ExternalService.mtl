[comment encoding = UTF-8 /]
[module ExternalService('platform:/plugin/eu.scasefp7.eclipse.mde.m2m/Metamodels/AnnotationLayerStack.ecore', 'platform:/plugin/eu.scasefp7.eclipse.mde.m2m/Metamodels/AuthenticationPSMMetamodel.ecore', 'platform:/plugin/eu.scasefp7.eclipse.mde.m2m/Metamodels/ExternalServiceLayerPSMMetamodel.ecore', 'platform:/plugin/eu.scasefp7.eclipse.mde.m2m/Metamodels/PSMMetamodel.ecore')]


[template public generateExternalService(anAnnotationStack : AnnotationStack)]
[for (a : JavaRESTClientController | anAnnotationStack.getJavaRESTClientControllerAnnotations())]
[file ('/' + anAnnotationStack.hasCorePSM.name + 'Client/js/controllers/' + a.isJavaRESTClientController.annotatesJavaAlgoController.parentName + '.controller.js', false, 'UTF-8')]
/**
* @ngdoc controller
* @name [anAnnotationStack.hasCorePSM.name/]App.controller:[a.isJavaRESTClientController.annotatesJavaAlgoController.parentName/]Controller
* @description:
*
* This is the controller responsible to make the HTTP calls for communicating with the external service.
* Also it parses the given responce and retrieves the data we need.
**/
angular
    .module('[anAnnotationStack.hasCorePSM.name/]App')
    .controller('[a.isJavaRESTClientController.annotatesJavaAlgoController.parentName/]Controller', [a.isJavaRESTClientController.annotatesJavaAlgoController.parentName/]);

function [a.isJavaRESTClientController.annotatesJavaAlgoController.parentName/]($scope, dataService, config, $location, $window, $rootScope, $route, Notification) {
	var response;    
	$scope.model = {}


	/**
	* @ngdoc method
	* @name submit
	* @methodOf [anAnnotationStack.hasCorePSM.name/]App.controller:[a.isJavaRESTClientController.annotatesJavaAlgoController.parentName/]Controller
	* @description
	*
	* This method is called from the user when he wants to send information to the 
	* [a.isJavaRESTClientController.annotatesJavaAlgoController.parentName/] external service.
	* 
	**/
    $scope.submit = function (model) {
	dataService.data(config.[a.isJavaRESTClientController.annotatesJavaAlgoController.parentName/]Url).getall(
            {
			[for (qParam : QueryParam | a.isJavaRESTClientController.annotatesJavaAlgoController.JavaAlgoRControllerHasHTTPActivity.getQueryParams(anAnnotationStack))]
			[qParam.name/]: model.[qParam.name/],
			[/for]
            }, function (data) {
                response = data;
            }).$promise.then(
            //on success
            function () {
			[if not(a.hasAssociatedModel.hasJavaOutputModel.oclIsUndefined())]
			[for ( anOutputProperty : Property | a.hasAssociatedModel.hasJavaOutputModel.hasOutputProperty)]
					[if (anOutputProperty.type = 'Complex')]
					parseResponse(response.[anOutputProperty.name/])
					[else]
					$scope.model.[anOutputProperty.name/] = response.[anOutputProperty.name/]
					[/if] 
			[/for]
			[/if]
            },
            //error
            function () { Notification.error("Wrong Query Parameters "); }
            )
    };
	[if not(a.hasAssociatedModel.hasJavaOutputModel.oclIsUndefined())]
	[for ( anOutputProperty : Property | a.hasAssociatedModel.hasJavaOutputModel.hasOutputProperty)]
	[if (anOutputProperty.type = 'Complex')]
	/**
	* @ngdoc method
	* @name submit
	* @methodOf [anAnnotationStack.hasCorePSM.name/]App.controller:[a.isJavaRESTClientController.annotatesJavaAlgoController.parentName/]Controller
	* @description
	*
	* This method is called from the submit method to parse the responce of 
	* [a.isJavaRESTClientController.annotatesJavaAlgoController.parentName/] external service.
	**/ 

	function parseResponse(response) {
	  $scope.valuableData = {};
        JSON.parse(JSON.stringify(response), function (key, value) {
			[for (aComplexType : ComplexType | a.hasComplexTypes)]
			[for (aComplexTypeProperty : ComplexTypeProperty | aComplexType.hasComplexTypeProperties)]
			[if (aComplexTypeProperty.hasPrimitiveType)]
			if (key.substr(0, [aComplexTypeProperty.name.size()/]) == '[aComplexTypeProperty.name/]') {
            	$scope.valuableData['['/]key] = value;
            }
			[/if]
			[/for]
			[/for]
            return value;
        });
        for (var i in $scope.valuableData) {
            console.log("valuableData['['/]" + i + "]: " + $scope.valuableData['['/]i])
            if (angular.isArray($scope.valuableData['['/]i])) {
                for (var j in $scope.valuableData['['/]i]) {
                    console.log($scope.valuableData['['/]i]['['/]j])
                    $scope.valuableData['['/]i + '1'] = $scope.valuableData['['/]i]['['/]0]
                    $scope.valuableData['['/]i + '2'] = $scope.valuableData['['/]i]['['/]1]
                }
            }
        }

        $scope.result = true;
    };
	[/if]
	[/for]
	[/if]
}

[/file]

[file ('/' + anAnnotationStack.hasCorePSM.name + 'Client/templates/' + a.isJavaRESTClientController.annotatesJavaAlgoController.parentName + '.html', false, 'UTF-8')]
	

<div class=" ui container" ng-controller="[a.isJavaRESTClientController.annotatesJavaAlgoController.parentName/]Controller">
    <br>
    <div class="ui header teal segment">
        <h1 class="ui center aligned header">Use External Services</h1>
    </div>
    <br><br>
	<div class="ui grid">
	<div class="eight wide column">
	
		<form class="ui form">
			<div class="ui raised secondary segment field">	
			<h3 class="ui teal ribbon large label">Query Parameters</h3>
			<br><br>
			[if (a.isJavaRESTClientController.annotatesJavaAlgoController.JavaAlgoRControllerHasHTTPActivity.getQueryParams(anAnnotationStack)->size() > 0)]
			[for (qParam : QueryParam | a.isJavaRESTClientController.annotatesJavaAlgoController.JavaAlgoRControllerHasHTTPActivity.getQueryParams(anAnnotationStack))]
				<div class="field">
					<label>[qParam.name/]</label>
					<input type="text" name="[qParam.name/]" placeholder="[qParam.name.toUpperFirst()/]" ng-model="queryModel.[qParam.name/]">
				</div>
			[/for]
			[else]
			<div class="ui secondary segment">
  				<p>The external service doesn't have query parameters</p>
			</div>
			[/if]
				[if not(a.hasAssociatedModel.hasJavaInputModel.oclIsUndefined())]
				<button class="ui button" ng-click="inputModel = true">Next</button>
				[else]
			    <button class="ui button" type="submit" ng-click="submit(queryModel)">Submit</button>
				[/if]
                </div>
         </form>

		<br><br>
		<form class="ui form" ng-show="inputModel">
			<div class="ui raised secondary segment field">	
			<h3 class="ui teal ribbon large label">Input Model Parameters</h3>
			<br><br>
		[if not(a.hasAssociatedModel.hasJavaInputModel.oclIsUndefined())]
		[for (inputProperty : Property | a.hasAssociatedModel.hasJavaInputModel.hasInputProperty)]
		[if (inputProperty.type = 'Complex')]
		[for (property : ComplexTypeProperty | inputProperty.hasComplexType.hasComplexTypeProperties)]
		[if (property.hasPrimitiveType)]
				<div class="field">
					<label>[property.name/]</label>
					<input type="text" name="[property.name/]" placeholder="[property.name.toUpperFirst()/]" ng-model="inputModel.[property.name/]">
				</div>
		[/if]
		[/for]
		[/if]
		[/for]
			<button class="ui button" type="submit" ng-click="submit(inputModel,queryModel )">Submit</button>
		[/if]
           </div>
         </form>
    </div>
	<div class="eight wide column" ng-show="result">
		<table class="ui celled striped table">
                <thead>
                    <tr>
                        <th colspan="3">
                            Response
                        </th>
                    </tr>
                </thead>
                <tbody ng-repeat="(key, value) in valuableData">
                    <tr>
                        <td class="collapsing">
                            {{key}}
                        </td>
                        <td> {{value}}</td>
                    </tr>
                </tbody>
    	</table>
	</div>
</div>
</div>    
                
                    
                 

                    
                        
                        
                    
                    
                    

                
        



[/file]
[/for]
[/template]
[query private getJavaRESTClientControllerAnnotations(anAnnotationStack : AnnotationStack) : Sequence(JavaRESTClientController) =
	anAnnotationStack.hasExternalServiceLayer.hasAnnotation->select(annotation | annotation.oclIsTypeOf(JavaRESTClientController))->asSequence()
/]

[query private getQueryParams(httpActivity : HTTPActivity, anAnnotationStack : AnnotationStack) : Sequence(QueryParam) =
	anAnnotationStack.getJavaRESTClientHTTPActivity(anAnnotationStack, httpActivity).hasQueryParam->asSequence()
/]

[query private getJavaRESTClientHTTPActivity(anAnnotationStack : AnnotationStack, httpActivity : HTTPActivity) : JavaRESTClientHTTPActivity =
	anAnnotationStack.getJavaRESTClientControllerAnnotations(anAnnotationStack).hasJavaRESTClientHTTPActivity->select( javaRESTClientHTTPActivity | javaRESTClientHTTPActivity.isJavaRESTClientHTTPActivity.annotatesHTTPActivity->includes(httpActivity))->at(1)
/]
